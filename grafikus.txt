Az egesz ablakot a window singleton osztaly reprezentalja, o is static get()-el lekerheto, vagy ha meg nem letezik akkor letrehozhato object. O megorokli a JFramet, ami maga egy canvas, szoval lehet ra rajzolni. Panelokbol fog allni az egesz ablak, kb mint a html divek. A bal oldali negyzetes reszen lesz a terkep, ezt a pMap nevu panel fogja megjeleniteni. Bal oldalon lesz egy pInfoText nevu label, ami azt irja, hogy epp mit kene csinalni, vagy ha nem kell semmit, akkor azt hogy ki az aktiv jatekos.
Alatta az aktiv jatekos elerheto es aktiv agenseit, es mas allapotat tartalmazo panelek vanak. Ez egy custom IPlayerPanel interfacet megvalosito panel. Az ilyen specko panelok azt tudjak, hogy panelek es egy jatekoshoz vannak kotve es az updatere a jatekos megfelelo tulajdonsaga alapjan labeleket hoznak letre, es magukba rajzoljak, pl minden eszkozhoz egy labelt, agensekhez meg ilyenekhez. Ezek updatere megfeleloen frissulnek.
Ezek a specko labelek meg azt tudjak, hogy amikor a labelek letrejonnek, akkor eltaroljak az adott agenst, eszkozt, vagy amit eppen kell. A tipusuknak megfelelo kattintas esemenykezelot rakotik a letrejott labelekre, szoval ha mondjuk egy agents reprezentalo labelt kattintok, akkor az az AgentMouseAdapter mousePressed esemenyet fogjak meghivni. Ez kap parameterben egy esemenyt, aminek tudhatjuk a forrasat. Mivel minden tipust reprezentalo panel labeljei mas esemenykezeloket fognak hivni, ezert a parameter forrasat atcastolhatjuk mondjuk Agensre, vagy eszkozre, vagy amire kattintottunk. Ezzel meghivjuk a Game megfelelo metodusat, atadva parameterul, hogy mire kattintottak.
Ez a megvalositas valojaban a visitor, szoval picit bonyinak tunhet, leirom gyorsan cimszavakban.

Az ablak felepitesekor minden specko panelbol letrehoz egyet, es bellitja hozza jatekosnak az aktiv jatekost.
A panelokon meghivja az update metodust, ami a jatekos megfelelo tulajdonsagait listazza specko labeleket letrehozva, pl minden agensnek egy PAgent.
A panelok a letrehozott labeleken meg beallitjak, hogy milyen esemenykezelot kell hivni, ha rajukkaintanak, pl az eszkozokoet mutato panel minden eszkozt reprezentalo labelre beallitja az eszkozre kattintottak esemenykezelo kell neked.
Ha rakatintottak, elkapja az esemenyt a megfelelo esemenykezelo, es mivel tudjuk, hogy pl az eszkozre kattintottak esemenyt csak eszkozt reprezentalo label hivja meg, ezert az esemeny forrasat castoljuk eszkoz labelre.
Ehhez a castolt labelhez tartozo objecttel (eszkoz, agens, ilyenek) meghivjuk a game megfelelo metodusat, pl eszkozre kattintottak, ezzel az eszkozzel.

Nah kb ez volt a view resze, lathatjatok, hogyha lecserelem a swinget, akkoris onnan mar nem kell modositanom semmit, hogy a game megfelelo metodusat meghivtak azzal, amire kattintott a jatekos.
Itt kezeljuk a kattintast, hogy vane ertelme meg ilyenek, ez a game logic, kb a regi controller, hiszen ez az MVCbol a C.

Minden player es field megvalositja, a IDrawable interfacet, ami a panel labeljeivel egyezo modon megfelelo esemenykezelot hiv kattintasra, es az meg a jatek logikajanak szol, hogy mi tortent. Ok a window ervenytelenulesere automatikusan hivott paintnel viszont egy magukban tarolt kepet fognak megjeleniteni a poziciojukban, es nem csak magukat mint a labelek.

Ha a paint bekovetkezik mert invalid lett az ablak, vagy az updatetel kezzel invalidaltuk, akkor az a paneleket automatikusan megjeleniti, azok meg magukon belul a labeleket a megfelelo szovegekkel formazva. A pMap-be az elements elemeit, amik mint rajzolhato kirajzolja, amik valojaban kepeket rajzolnak.


Kb ennyi lenne az egesz, ha van kerdes szoljatok, de nemnagyon fogok raerni, szoval azert irtam elore.
